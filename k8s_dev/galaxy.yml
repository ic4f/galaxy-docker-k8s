kind: Service
apiVersion: v1
metadata:
  name: galaxy
  labels:
    app: galaxy
    tier: web
spec:
  type: NodePort
  ports: 
  - protocol: TCP
    port: 8090
    targetPort: galaxy-http
  selector:
    app: galaxy
    tier: web 

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: galaxy-pv
  labels:
    app: galaxy
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/tmp/k8s/volumes/galaxy/data"

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: galaxy-pvc
  labels:
    app: galaxy
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

##TODO: review this
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: galaxy-ingress
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - http:
      paths:
      # - path: /galaxy/?(.*)
      - path: /
        backend:
          serviceName: galaxy
          servicePort: 8090

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: galaxy-web-deploy
  labels:
    app: galaxy
    tier: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: galaxy
      tier: web
  template:
    metadata:
      labels:
        app: galaxy
        tier: web
    spec:
      volumes: 
      - name: galaxy-job-conf-file
        configMap:
          name: galaxy-job-conf
      - name: galaxy-data
        persistentVolumeClaim:
          claimName: galaxy-pvc
      containers:
      - name: galaxy-web-container
        image: "galaxy/galaxy:minimal"
        #image: "ic4f/galaxy:minimal"
        imagePullPolicy: "IfNotPresent"
        #envFrom:
        #- configMapRef:
        
        ports:
        - name: galaxy-http
          containerPort: 8080
        command: ["/galaxy/server/.venv/bin/uwsgi"]
        args: ["--yaml", "/galaxy/server/config/galaxy.yml"]
        volumeMounts:
        - name: galaxy-data
          mountPath: "/galaxy/server/database/"
